equilibrium <- distinct(equilibrium)
# Return the equilibrium solutions, rounded to two decimal places
return(equilibrium)
}
# --------------------------------------------------------------------------------
# Model definition
# --------------------------------------------------------------------------------
model <- function(x) {
S <- rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * x[5] / (x[5] + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir)) * x[1] -
x[1] * (ms + ma + mh * hmax * sh / (sh + x[1]))
CA <- alpha * h * pmax * (1 - (hmax * sh / (sh + x[1])) / (hmax * sh / (sh + x[1]) + hp)) -
x[2] * (
phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + x[1])) / (hmax * sh / (sh + x[1]) + hea) +
1 / (1 + exp(-fb1 * (x[2] + x[3] - fb2)))
)
CS <- beta * x[1] * (ms + mh * hmax * sh / (sh + x[1])) -
x[3] * (
phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + x[1])) / (hmax * sh / (sh + x[1]) + hes) +
1 / (1 + exp(-fb1 * (x[2] + x[3] - fb2)))
)
CB <- x[2] * 1 / (1 + exp(-fb1 * (x[2] + x[3] - fb2))) +
x[3] * 1 / (1 + exp(-fb1 * (x[2] + x[3] - fb2))) -
(1 - ma * da) * x[4] * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) -
ma * da * x[4] * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
N <- i + gamma * (
x[2] * phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
x[3] * phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(1 - ma * da) * x[4] * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
ma * da * x[4] * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
) -
delta * (
rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * x[5] / (x[5] + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir))
) * x[1] - l * x[5]
c(S = S, CA = CA, CS = CS, CB = CB, N = N)
}
# --------------------------------------------------------------------------------
# Parameter definitions
# --------------------------------------------------------------------------------
rmax <- 0.011
ms <- 0.0014
topt <- 298.85
tmax <- 307.05
nr <- 0.015
i0 <- 709
ir <- 296
sh <- 22.7
hp <- 0.023
a <- 0.07
mh <- 0.028
alpha <- 0.194
h <- 0.68
phida <- 0.024
phids <- 0.00024
phidb <- 0.00005
ea <- 58000
r <- 8.314
td <- 303.65
hea <- 12.53
hes <- 12.53
fb1 <- 0.0022
fb2 <- 1335
beta <- 0.292
gamma <- 0.137
delta <- 0.052
l <- 0.01
da <- 0.125/6
z <- 10
temp <- 298.85
hmax <- 0.15
pmax <- 0.5
ma <- 0
i <- 0.005865335
iv1_max <- 5000
iv2_max <- 5
iv3_max <- 5
iv4_max <- 5
iv5_max <- 10000
upper_limit <- c(iv1_max, iv2_max, iv3_max, iv4_max, iv5_max)
lower_limit <- c(10, 0, 0, 0, 0)
iter <- 4
# --------------------------------------------------------------------------------
# Find initial equilibrium
# --------------------------------------------------------------------------------
initial_eq <- multisolve(model, lower_limit, upper_limit, iter) %>%
filter(S == max(S))
# --------------------------------------------------------------------------------
# More parameters
# --------------------------------------------------------------------------------
params <- c(
rmax = 0.011,
ms = 0.0014,
topt = 298.85,
tmax = 307.05,
nr = 0.015,
i0 = 709,
ir = 296,
sh = 22.7,
hp = 0.023,
a = 0.07,
mh = 0.028,
alpha = 0.194,
h = 0.68,
phida = 0.024,
phids = 0.00024,
phidb = 0.00005,
ea = 58000,
r = 8.314,
td = 303.65,
hea = 12.53,
hes = 12.53,
fb1 = 0.0022,
fb2 = 1335,
beta = 0.292,
gamma = 0.137,
delta = 0.052,
l = 0.01,
da = 0.125/6,
z = 10,
hmax = 0.15,
i = 0.005865335
)
pmax_0 <- 0.5    # pmax initial value
pmax_f <- 4.14   # pmax final value
temp_0 <- 298.85 # temp initial value
temp_f <- 308    # temp final value
ma_0 <- 0        # ma initial value
ma_f <- 0.00330  # ma final value
pmax <- pmax_f
temp <- temp_f
ma <- ma_f
final_eq <- multisolve(model, lower_limit, upper_limit, iter) %>%
filter(S == max(S))
pmax <- pmax_0
temp <- temp_0
ma <- ma_0
slow <- 365000
fast <- 365
# --------------------------------------------------------------------------------
# Define the number of values per parameter
# --------------------------------------------------------------------------------
number_draws <- 10  # For example
# Generate equally spaced values between 'slow' and 'fast' for each parameter
pmax_values <- as.integer(seq(slow, fast, length.out = number_draws))
temp_values <- as.integer(seq(slow, fast, length.out = number_draws))
ma_values   <- as.integer(seq(slow, fast, length.out = number_draws))
# Create the dataframe with all possible combinations
draws <- expand.grid(pmax = pmax_values, temp = temp_values, ma = ma_values)
precision <- 0.05
precision_c <- 10
precision_s <- 10
# --------------------------------------------------------------------------------
# Start parallelisation
rate_index = 1
ma <- ma_0
pmax <- pmax_0
temp <- temp_0
rates <- draws[rate_index, ]
View(rates)
# Transpose the dataframe to sort columns based on the first row
rates <- as.data.frame(t(rates))
# Sort the transposed dataframe based on the values
rates <- rates[order(rates[, 1], decreasing = FALSE), , drop = FALSE]
# Transpose it back to the original form
rates <- as.data.frame(t(rates))
rate_pmax <- as.numeric(rates %>% select(pmax))
rate_temp <- as.numeric(rates %>% select(temp))
rate_ma <- as.numeric(rates %>% select(ma))
min_par <- colnames(rates[1])
mid_rate <- as.numeric(rates[2])
mid_par <- colnames(rates[2])
max_rate <- as.numeric(rates[3])
max_par <- colnames(rates[3])
# --------------------------------------------------------------------------------
# Inner model function for ODE solver
# --------------------------------------------------------------------------------
seagrass <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Parameters changing linearly with time
temp <- temp_0 + (temp_f - temp_0) * t * 1 / rate_temp
pmax <- pmax_0 + (pmax_f - pmax_0) * t * 1 / rate_pmax
ma <- ma_0 + (ma_f - ma_0) * t * 1 / rate_ma
dS <- rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir)) * S -
S * (ms + ma + mh * hmax * sh / (sh + S))
dCA <- alpha * h * pmax * (1 - (hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hp)) -
CA * (
phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hea) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCS <- beta * S * (ms + mh * hmax * sh / (sh + S)) -
CS * (
phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hes) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCB <- CA * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) +
CS * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) -
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) -
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
dN <- i + gamma * (
CA * phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
CS * phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
) -
delta * (
rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir))
) * S - l * N
list(c(dS, dCA, dCS, dCB, dN))
})
}
# --------------------------------------------------------------------------------
# 1st integration phase
# --------------------------------------------------------------------------------
min_rate <- min(rates)
times_1 <- seq(0, min_rate, 1)
start_1_vector <- as.numeric(as.numeric(initial_eq))
names(start_1_vector) <- names(initial_eq)
data <- as.data.frame(lsoda(y = start_1_vector, times = times_1, func = seagrass, parms = params))
data <- data %>%
mutate(pmax = pmax_0 + (pmax_f - pmax_0) * time * 1 / rate_pmax) %>%
mutate(temp = temp_0 + (temp_f - temp_0) * time * 1 / rate_temp) %>%
mutate(ma = ma_0 + (ma_f - ma_0) * time * 1 / rate_ma)
# Check if S and CB approach final equilibrium within precision
s_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 1] * (1 - precision), 0) <= S & S <= round(final_eq[, 1] * (1 + precision), 0))
if (nrow(s_asymptotic) > 0) {
s_asymptotic <- s_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
c_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 4] * (1 - precision), 0) <= CB & CB <= round(final_eq[, 4] * (1 + precision), 0))
if (nrow(c_asymptotic) > 0) {
c_asymptotic <- c_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
# --------------------------------------------------------------------------------
# 2nd integration phase if not asymptotic
# --------------------------------------------------------------------------------
if (nrow(s_asymptotic) == 0 | nrow(c_asymptotic) == 0) {
seagrass <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
# Parameter assignment in the second phase
assign(min_par, get(paste0(min_par, "_f")))
assign(mid_par, get(paste0(mid_par, "_0")) + (get(paste0(mid_par, "_f")) - get(paste0(mid_par, "_0"))) * t * 1 / mid_rate)
assign(max_par, get(paste0(max_par, "_0")) + (get(paste0(max_par, "_f")) - get(paste0(max_par, "_0"))) * t * 1 / max_rate)
dS <- rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir)) * S -
S * (ms + ma + mh * hmax * sh / (sh + S))
dCA <- alpha * h * pmax * (1 - (hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hp)) -
CA * (
phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hea) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCS <- beta * S * (ms + mh * hmax * sh / (sh + S)) -
CS * (
phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hes) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCB <- CA * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) +
CS * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) -
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) -
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
dN <- i + gamma * (
CA * phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
CS * phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
) -
delta * (
rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir))
) * S - l * N
list(c(dS, dCA, dCS, dCB, dN))
})
}
if (length(seq(min_rate, mid_rate, 1)) != 1) {
times_2 <- seq(min_rate, mid_rate, 1)
start_2_vector <- as.numeric(
data %>% filter(time == max(time)) %>% select(S, CA, CS, CB, N)
)
names(start_2_vector) <- names(initial_eq)
out_2 <- as.data.frame(lsoda(y = start_2_vector, times = times_2, func = seagrass, parms = params))
out_2 <- out_2 %>%
mutate(!!min_par := rep(get(paste0(min_par, "_f")), length(times_2))) %>%
mutate(!!mid_par := get(paste0(mid_par, "_0")) + (get(paste0(mid_par, "_f")) - get(paste0(mid_par, "_0"))) * time * 1 / mid_rate) %>%
mutate(!!max_par := get(paste0(max_par, "_0")) + (get(paste0(max_par, "_f")) - get(paste0(max_par, "_0"))) * time * 1 / max_rate)
data <- rbind(data, out_2[-1, ])
rm(out_2)
s_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 1] * (1 - precision), 0) <= S & S <= round(final_eq[, 1] * (1 + precision), 0))
if (nrow(s_asymptotic) > 0) {
s_asymptotic <- s_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
c_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 4] * (1 - precision), 0) <= CB & CB <= round(final_eq[, 4] * (1 + precision), 0))
if (nrow(c_asymptotic) > 0) {
c_asymptotic <- c_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
}
# --------------------------------------------------------------------------------
# 3rd integration phase if still not asymptotic
# --------------------------------------------------------------------------------
if (nrow(s_asymptotic) == 0 | nrow(c_asymptotic) == 0) {
seagrass <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
assign(min_par, get(paste0(min_par, "_f")))
assign(mid_par, get(paste0(mid_par, "_f")))
assign(max_par, get(paste0(max_par, "_0")) + (get(paste0(max_par, "_f")) - get(paste0(max_par, "_0"))) * t * 1 / max_rate)
dS <- rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir)) * S -
S * (ms + ma + mh * hmax * sh / (sh + S))
dCA <- alpha * h * pmax * (1 - (hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hp)) -
CA * (
phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hea) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCS <- beta * S * (ms + mh * hmax * sh / (sh + S)) -
CS * (
phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hes) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCB <- CA * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) +
CS * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) -
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) -
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
dN <- i + gamma * (
CA * phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
CS * phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
) -
delta * (
rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir))
) * S - l * N
list(c(dS, dCA, dCS, dCB, dN))
})
}
if (length(seq(mid_rate, max_rate, 1)) != 1) {
times_3 <- seq(mid_rate, max_rate, 1)
start_3_vector <- as.numeric(
data %>% filter(time == max(time)) %>% select(S, CA, CS, CB, N)
)
names(start_3_vector) <- names(initial_eq)
out_3 <- as.data.frame(lsoda(y = start_3_vector, times = times_3, func = seagrass, parms = params))
out_3 <- out_3 %>%
mutate(!!min_par := rep(get(paste0(min_par, "_f")), length(times_3))) %>%
mutate(!!mid_par := rep(get(paste0(mid_par, "_f")), length(times_3))) %>%
mutate(!!max_par := get(paste0(max_par, "_0")) + (get(paste0(max_par, "_f")) - get(paste0(max_par, "_0"))) * time * 1 / max_rate)
data <- rbind(data, out_3[-1, ])
rm(out_3)
s_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 1] * (1 - precision), 0) <= S & S <= round(final_eq[, 1] * (1 + precision), 0))
if (nrow(s_asymptotic) > 0) {
s_asymptotic <- s_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
c_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 4] * (1 - precision), 0) <= CB & CB <= round(final_eq[, 4] * (1 + precision), 0))
if (nrow(c_asymptotic) > 0) {
c_asymptotic <- c_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
}
# --------------------------------------------------------------------------------
# Further extension if still not asymptotic
# --------------------------------------------------------------------------------
index <- 1
while (nrow(s_asymptotic) == 0 | nrow(c_asymptotic) == 0) {
seagrass <- function(t, state, parameters) {
with(as.list(c(state, parameters)), {
assign(min_par, get(paste0(min_par, "_f")))
assign(mid_par, get(paste0(mid_par, "_f")))
assign(max_par, get(paste0(max_par, "_f")))
dS <- rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir)) * S -
S * (ms + ma + mh * hmax * sh / (sh + S))
dCA <- alpha * h * pmax * (1 - (hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hp)) -
CA * (
phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hea) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCS <- beta * S * (ms + mh * hmax * sh / (sh + S)) -
CS * (
phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(hmax * sh / (sh + S)) / (hmax * sh / (sh + S) + hes) +
1 / (1 + exp(-fb1 * (CA + CS - fb2)))
)
dCB <- CA * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) +
CS * 1 / (1 + exp(-fb1 * (CA + CS - fb2))) -
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) -
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
dN <- i + gamma * (
CA * phida * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
CS * phids * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
(1 - ma * da) * CB * phidb * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp)) +
ma * da * CB * (phida + phids) / 2 * 1 / (exp(-ea / (8.314 * td))) * exp(-ea / (8.314 * temp))
) -
delta * (
rmax * ((tmax - temp) / (tmax - topt)) * ((temp / topt)^(topt / (tmax - topt))) * N / (N + nr) *
(i0 * exp(-a * pmax * z) / (i0 * exp(-a * pmax * z) + ir))
) * S - l * N
list(c(dS, dCA, dCS, dCB, dN))
})
}
times_n <- seq(max_rate * (index), max_rate * (index + 1), 1)
start_n_vector <- as.numeric(
data %>% filter(time == max(time)) %>% select(S, CA, CS, CB, N)
)
names(start_n_vector) <- names(initial_eq)
out_n <- as.data.frame(lsoda(y = start_n_vector, times = times_n, func = seagrass, parms = params))
out_n <- out_n %>%
mutate(!!min_par := rep(get(paste0(min_par, "_f")), length(times_n))) %>%
mutate(!!mid_par := rep(get(paste0(mid_par, "_f")), length(times_n))) %>%
mutate(!!max_par := rep(get(paste0(max_par, "_f")), length(times_n)))
data <- rbind(data, out_n[-1, ])
rm(out_n)
s_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 1] * (1 - precision), 0) <= S & S <= round(final_eq[, 1] * (1 + precision), 0))
if (nrow(s_asymptotic) > 0) {
s_asymptotic <- s_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
c_asymptotic <- data %>%
mutate(across(everything(), ~round(., digits = 2))) %>%
filter(round(final_eq[, 4] * (1 - precision), 0) <= CB & CB <= round(final_eq[, 4] * (1 + precision), 0))
if (nrow(c_asymptotic) > 0) {
c_asymptotic <- c_asymptotic %>%
filter(time == min(time)) %>%
select(time)
}
index <- index + 1
}
}
}
# Compute lag time in years
lag <- (c_asymptotic - s_asymptotic) / 365
lag <- lag %>%
rename(lag = time)
# --------------------------------------------------------------------------------
# Check for bifurcation
# --------------------------------------------------------------------------------
low_time <- 0
high_time <- dim(data)[1]
bif_time <- round((low_time + high_time) / 2, 0)
assign("pmax", as.numeric(data %>% filter(time == bif_time) %>% select(pmax)))
assign("ma", as.numeric(data %>% filter(time == bif_time) %>% select(ma)))
assign("temp", as.numeric(data %>% filter(time == bif_time) %>% select(temp)))
bifurcation_1 <- dim(multisolve(model, lower_limit, upper_limit, iter))[1]
assign("pmax", as.numeric(data %>% filter(time == bif_time + 1) %>% select(pmax)))
assign("ma", as.numeric(data %>% filter(time == bif_time + 1) %>% select(ma)))
assign("temp", as.numeric(data %>% filter(time == bif_time + 1) %>% select(temp)))
bifurcation_2 <- dim(multisolve(model, lower_limit, upper_limit, iter))[1]
# Initialize iteration counter
iter_count <- 0
while ((bifurcation_2 != 1 | bifurcation_1 < 2) && (iter_count < 50)) {
# Increment counter at the start of each loop iteration
iter_count <- iter_count + 1
if (bifurcation_2 == 1 & bifurcation_1 == 1) {
high_time <- bif_time
bif_time <- round((high_time + low_time) / 2, 0)
} else if (bifurcation_2 > 1) {
low_time <- bif_time
bif_time <- round((high_time + low_time) / 2, 0)
}
assign("pmax", as.numeric(data %>% filter(time == bif_time) %>% select(pmax)))
assign("ma", as.numeric(data %>% filter(time == bif_time) %>% select(ma)))
assign("temp", as.numeric(data %>% filter(time == bif_time) %>% select(temp)))
bifurcation_1 <- dim(multisolve(model, lower_limit, upper_limit, iter))[1]
assign("pmax", as.numeric(data %>% filter(time == bif_time + 1) %>% select(pmax)))
assign("ma", as.numeric(data %>% filter(time == bif_time + 1) %>% select(ma)))
assign("temp", as.numeric(data %>% filter(time == bif_time + 1) %>% select(temp)))
bifurcation_2 <- dim(multisolve(model, lower_limit, upper_limit, iter))[1]
print(bif_time)
}
data <- data %>% filter(time <= bif_time)
lag
(c_asymptotic - s_asymptotic) / 365
# Compute lag time in years
lag <- (c_asymptotic - s_asymptotic) / 365
lag <- lag %>%
rename(lag = time)
rm(data)
cbind(rates, lag)
